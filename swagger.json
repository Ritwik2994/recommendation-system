{
  "swagger": "2.0",
  "info": {
    "description": "Node Typescript Boilerplate for Microservices. Skeleton for Node.js Apps written in TypeScript (with Setup Instructions for ESLint, Prettier, and Husky)",
    "version": "1.0.0",
    "title": "Node Boilerplate"
  },
  "host": "",
  "basePath": "",
  "tags": [
    {
      "name": "node-boilerplate",
      "description": "Node Typescript Boilerplate"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/system/info": {
      "get": {
        "tags": ["node-boilerplate"],
        "summary": "get system status",
        "description": "",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": []
      }
    },
    "/system/time": {
      "get": {
        "tags": ["node-boilerplate"],
        "summary": "get server time",
        "description": "",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": []
      }
    },
    "/system/usage": {
      "get": {
        "tags": ["node-boilerplate"],
        "summary": "get server usage",
        "description": "",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": []
      }
    },
    "/user": {
      "post": {
        "tags": ["User"],
        "summary": "Register a new user",
        "description": "Endpoint to register a new user",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User registration data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRegistrationInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          }
        },
        "security": []
      },
      "get": {
        "tags": ["User"],
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": []
      }
    },
    "/user/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Get user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": []
      }
    },
    "/post": {
      "post": {
        "tags": ["Post"],
        "summary": "Create a new post",
        "description": "Endpoint to create a new post",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Post object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Post created successfully",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          }
        },
        "security": []
      },
      "get": {
        "tags": ["Post"],
        "summary": "Get all Posts",
        "responses": {
          "200": {
            "description": "List of Posts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": []
      }
    },
    "/post/{id}": {
      "get": {
        "tags": ["Post"],
        "summary": "Get post by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Post details",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": []
      }
    },
    "/recommendation/posts/{id}": {
      "get": {
        "tags": ["Recommendation"],
        "summary": "Get all Recommendation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Recommendations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recommendation"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": []
      }
    }
  },
  "securityDefinitions": {},
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {}
    },
    "PostInput": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "Content of the post"
        },
        "author": {
          "type": "string",
          "description": "ID of the post's author (User)"
        },
        "sport": {
          "type": "string",
          "description": "Sport related to the post"
        },
        "event": {
          "type": "string",
          "description": "Event related to the post"
        }
      },
      "required": ["content", "author", "sport", "event"]
    },
    "Post": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique ID of the post"
        },
        "content": {
          "type": "string",
          "description": "Content of the post"
        },
        "author": {
          "type": "string",
          "description": "ID of the post's author (User)"
        },
        "sport": {
          "type": "string",
          "description": "Sport related to the post"
        },
        "event": {
          "type": "string",
          "description": "Event related to the post"
        },
        "likes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of IDs of users who liked the post"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          },
          "description": "List of comments on the post"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the post was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the post was last updated"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "ID of the user who posted the comment"
        },
        "text": {
          "type": "string",
          "description": "Text content of the comment"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the comment was posted"
        }
      }
    },
    "UserRegistrationInput": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address of the user",
          "format": "email"
        },
        "password": {
          "type": "string",
          "description": "Password of the user"
        }
      },
      "required": ["email", "password"]
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique ID of the user"
        },
        "email": {
          "type": "string",
          "description": "Email address of the user"
        },
        "password": {
          "type": "string",
          "description": "Password of the user (hashed)"
        },
        "username": {
          "type": "string",
          "description": "Username of the user"
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Interests of the user"
        },
        "followedUsers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of IDs of users followed by the user"
        },
        "interactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Interaction"
          },
          "description": "List of user interactions"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the user was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the user was last updated"
        }
      }
    },
    "Interaction": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of interaction (like, comment, etc.)"
        },
        "postId": {
          "type": "string",
          "description": "ID of the post involved in the interaction"
        },
        "userId": {
          "type": "string",
          "description": "ID of the user involved in the interaction"
        }
      }
    },
      "Recommendation": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string",
            "description": "ID of the recommended post"
          },
          "text": {
            "type": "string",
            "description": "Text of the recommendation"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user who made the recommendation"
          },
          "likes": {
            "type": "integer",
            "description": "Number of likes for the recommendation"
          },
          "comments": {
            "type": "integer",
            "description": "Number of comments on the recommendation"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the recommendation was created"
          },
          "popularityScore": {
            "type": "integer",
            "description": "Popularity score of the recommendation"
          }
        }
      }
  },
  "externalDocs": {
    "description": "Find out more about Node Typescript Boilerplate",
    "url": "https://blog.santoshshinde.com/skeleton-for-node-js-apps-written-in-typescript-444fa1695b30"
  }
}
